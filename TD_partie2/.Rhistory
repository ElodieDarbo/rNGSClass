load(file = "data/CNVs_expression.RData")
View(annoRow)
head(vcfT)
View(clinical)
m <- match(row.names(vcfT), row.names(vcfC))
head(m)
row.names(vcfT)[6]
# correspond au 5ème élément du second vecteur.
row.names(vcfC)[5]
row.names(vcfT)[6] == row.names(vcfC)[5]
vcfT.tri <- vcfT[!is.na(m),]
vcfC.tri <- vcfC[na.omit(m),]
coverage <- data.frame(chromosome=vcfT.tri$seqnames,pos=vcfT.tri$start, tumeur=vcfT.tri$DP, normal=vcfC.tri$DP)
logratio <- log2(coverage$tumeur+1) - log2(coverage$normal+1)
head(logratio)
head(coverage)
head(log2(coverage$tumeur+1))
head(log2(coverage$normal+1))
logratio <- log2(coverage$tumeur+1) - log2(coverage$normal+1)
# ajouter la colonne
coverage$logratio <- logratio
plot(x = coverage$pos, y=coverage$logratio)
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal")
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5)
coverage$tumeur <- coverage$tumeur * 0.5
# Calcul du log ratio
logratio <- log2(coverage$tumeur+1) - log2(coverage$normal+1)
# ajouter la colonne
coverage$logratio <- logratio
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5)
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5)
abline(h=0)
couleurs <- vector("lightgrey",nrow(coverage))
couleurs[logratio< -0.5] <- "red"
couleurs[logratio>1] <- "blue"
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
couleurs <- vector(nrow(coverage))
?vector
couleurs <- vector(mode="character",nrow(coverage))
head(couleurs)
couleurs <- rep("lightgrey",nrow(coverage))
couleurs <- rep("lightgrey",nrow(coverage))
# utiliser des vecteur logique pour trier les valeurs
couleurs[logratio< -0.5] <- "red"
couleurs[logratio>1] <- "blue"
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
coverage$tumeur <- coverage$tumeur * 0.5
# Calcul du log ratio
logratio <- log2(coverage$tumeur) - log2(coverage$normal)
# ajouter la colonne
couleurs <- rep("lightgrey",nrow(coverage))
# utiliser des vecteur logique pour trier les valeurs
couleurs[logratio< -0.5] <- "red"
couleurs[logratio>1] <- "blue"
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
coverage <- data.frame(chromosome=vcfT.tri$seqnames,pos=vcfT.tri$start, tumeur=vcfT.tri$DP, normal=vcfC.tri$DP)
coverage$tumeur <- coverage$tumeur * 0.5
# Calcul du log ratio
logratio <- log2(coverage$tumeur) - log2(coverage$normal)
# ajouter la colonne
coverage$logratio <- logratio
couleurs <- rep("lightgrey",nrow(coverage))
# utiliser des vecteur logique pour trier les valeurs
couleurs[logratio< -0.5] <- "red"
couleurs[logratio>1] <- "blue"
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
?CNA
class(CNA.object)
library(DNAcopy)
CNA.object <-CNA( genomdat = coverage$logratio,
chrom = coverage$chromosome,
maploc = coverage$pos,
data.type = 'logratio',
sampleid="LMS25")
class(CNA.object)
?smooth.CNA
CNA.smoothed <- smooth.CNA(CNA.object)
segs <- segment(CNA.smoothed,
verbose=1,
min.width=2,undo.splits="sdundo",
undo.SD=1)
plot(segs, plot.type="s")
segs <- segment(CNA.smoothed,
verbose=1,
min.width=2,undo.splits="sdundo",
undo.SD=1.5)
plot(segs, plot.type="s")
str(segs)
segs <- segs$output
head(segs)
segs <- segment(CNA.smoothed,
verbose=1,
min.width=2,undo.splits="sdundo",
undo.SD=0.5)
# plot the results
plot(segs, plot.type="s")
segs <- segs$output
head(segs)
segs <- segment(CNA.smoothed,
verbose=1,
min.width=2,undo.splits="sdundo",
undo.SD=1.5)
# plot the results
plot(segs, plot.type="s")
segs <- segs$output
head(segs)
segs
segs <- segment(CNA.smoothed,
verbose=1,
min.width=2,undo.splits="sdundo",
undo.SD=1.5)
str(segs)
head(segs)
head(segs$output)
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
couleurs <- rep("lightgrey",nrow(coverage))
# utiliser chaque ligne de segs pour remplir le vecteur
# et coverage pour la correspondance entre les coordonnées
# génomiques les positions dans le vecteur couleurs.
# je définis une fonction ayant 2 arguments, s qui sera chaque ligne
# de segs et cov qui sera l'objet coverage
apply(segs[,-(1:2)],1, function(s,cov){
# si le segment correspond à une moyenne de log ratio
# assez différente de 0 alors
if (abs(s[4])>0.3){
# creer un vecteur logique filtrant les positions contenues dans
# le segment.
in.seg <- cov$pos >= s[1] & cov$pos < s[2]
couleurs[in.seg] <<- ifelse(s[4]<0,"red","blue")
}
},cov=coverage)
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
segs <- segs$output
couleurs <- rep("lightgrey",nrow(coverage))
# utiliser chaque ligne de segs pour remplir le vecteur
# et coverage pour la correspondance entre les coordonnées
# génomiques les positions dans le vecteur couleurs.
# je définis une fonction ayant 2 arguments, s qui sera chaque ligne
# de segs et cov qui sera l'objet coverage
apply(segs[,-(1:2)],1, function(s,cov){
# si le segment correspond à une moyenne de log ratio
# assez différente de 0 alors
if (abs(s[4])>0.3){
# creer un vecteur logique filtrant les positions contenues dans
# le segment.
in.seg <- cov$pos >= s[1] & cov$pos < s[2]
couleurs[in.seg] <<- ifelse(s[4]<0,"red","blue")
}
},cov=coverage)
plot(x = coverage$pos, y=coverage$logratio, xlab="position", ylab="log ratio couverture tumeur/normal", pch=16, cex=0.5,col=couleurs)
abline(h=0)
lines(segs[,3:4])
library(pheatmap)
pheatmap(CN.chr17,
annotation_col=clinical[,c("Differentiation","Sex","Location")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
pheatmap(CN.chr17)
pheatmap(CN.chr17,show_colnames = F, show_rownames = F)
head(annoRow)
pheatmap(CN.chr17,show_colnames = F, show_rownames = F,annotation_row = annoRow)
pheatmap(CN.chr17,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F)
pheatmap(CN.chr17,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D2")
pheatmap(CN.chr17,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward")
pheatmap(CN.chr17,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F)
head(clinical)
pheatmap(CN.chr17,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D",
annotation_col = clinical[,c("Differentiation","Sex","Location")])
CN.chr17p <- CN.chr17[row.names(CN.chr17)%in%row.names(annoRow)[annoRow$arm=="p"],]
pheatmap(CN.chr17p,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D")
pheatmap(CN.chr17p,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D",
annotation_col = clinical[,c("Differentiation","Sex","Location")])
pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=c(colours()[131],colours()[121],"white","red",colours()[35]))
colours()[24]
pheatmap(CN.chr17p,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D",
annotation_col = clinical[,c("Differentiation","Sex","Location")],
color = c(colours()[131],colours()[121],"white","red",colours()[35]))
clust <- pheatmap(CN.chr17p, clustering_method = "ward.D",silent=T)
str(clust)
names(clust)
class(clust$tree_col)
cluster <- cutree(clust$tree_col, k = 2)
class(cluster)
head(cluster)
cluster <- as.factor(cluster)
head(cluster)
levels(cluster) # c'est un vecteur de 2 éléments
levels(cluster) <- c("clusterA","clusterB")
levels(cluster)
head(cluster)
m <- match(row.names(clinical),names(cluster))
clinical$CN.clust <- cluster[m]
head(clinical)
pheatmap(CN.chr17p,
show_colnames = F,
show_rownames = F,
annotation_row = annoRow,
cluster_rows = F,
clustering_method = "ward.D",
annotation_col = clinical[,c("Differentiation","Sex","Location","CN.clust")],
color = c(colours()[131],colours()[121],"white","red",colours()[35]))
vcfT[!is.na(vcfT$SYMBOL) & vcfT$SYMBOL=="TP53",]
coding
knit_with_parameters('~/Documents/TD_ENSTBB/TD_suite_R/scripts/NGS_analysis_part3.rmd')
load(file = "data/CNVs_expression.RData")
load(file = "data/clinical_CN.RData")
clust <- pheatmap(CN.chr17p, clustering_method = "ward.D",silent=T)
genes.in.loc <- annoRow$arm=="p"
genes <- row.names(annoRow)[genes.in.loc]
# afficher la longueur du vecteur obtenu
to.select <- row.names(CN.chr17)%in%genes
CN.chr17p <- CN.chr17[to.select,]
clust <- pheatmap(CN.chr17p, clustering_method = "ward.D",silent=T)
cluster <- cutree(clust$tree_col, k = 2)
m <- match(row.names(clinical),names(cluster))
head(m)
clinical$CN.clust <- cluster[m]
head(clinical)
load(file = "data/CNVs_expression.RData")
load(file = "data/clinical_CN.RData")
?fisher.test
fisher.test(x=clinical$Differentiation,y=clinical$CN.clust)
fisher.test(x=clinical$Differentiation,y=clinical$CN.clust)$estimate
test <- fisher.test(x=clinical$Differentiation,y=clinical$CN.clust)
str(test)
table(clinical$Differentiation)
table(clinical$Differentiation,clinical$CN.clust)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
knitr::opts_knit$set(root.dir='/Users/elodiedarbo/Documents/TD_ENSTBB/TD_part2')
load(file = "data/CNVs_expression.RData")
load(file = "data/clinical_CN.RData")
head(vcfT)
# afficher la table de contingence en utilisant table
table(clinical$Differentiation,clinical$CN.clust)
# créer le vecteur logique
diff1 <- clinical$Differentiation == 1
# appliquer le vecteur à la colonne souhaitée pour y modifier les valeurs
clinical$Differentiation[diff1] <- 2
# afficher la table de contingence en utilisant table
table(clinical$Differentiation,clinical$CN.clust)
test <- fisher.test(x=clinical$Differentiation,y=clinical$CN.clust)
test$estimate
test
summary(test)
print(test)
table(clinical$Location,clinical$CN.clust)
not.trunk <- clinical$Location != "Internal trunk"
clinical$Location[not.trunk] <- "other"
table(clinical$Location,clinical$CN.clust)
test <- fisher.test(x=clinical$Location,y=clinical$CN.clust)
print(test)
test <- fisher.test(x=clinical$Sex,y=clinical$CN.clust)
test
table(clinical$Sex,clinical$CN.clust)
head(clinical)
?Surv
survie.OS <- Surv(clinical$Time_OS,clinical$OS)
survie.OS
survie.MFS <- Surv(clinical$Time_MFS,clinical$Meta)
survie.MFS
?coxph
coxph.survie.OS <- coxph(survie.OS ~ CN.clust,data=clinical)
coxph.survie.MFS <- coxph(survie.MFS ~ CN.clust,data=clinical)
coxph.survie.OS
coxph.survie.MFS
dim'CN.chr17p'
dim(CN.chr17p)
CN.chr17p <- CN.chr17[row.names(CN.chr17)%in%row.names(annoRow)[annoRow$arm=="p"],]
cluster=factor(cutree(clust$tree_col, k = 4))
clust <- pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
cluster=factor(cutree(clust$tree_col, k = 4))
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location","CN.clust")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
cluster=factor(cutree(clust$tree_col, k = 5))
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location","CN.clust")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
clinical[grepl("TCGA",row.names(cli))]
clinical[grepl("TCGA",row.names(clinical)),]
dim(clinical[grepl("TCGA",row.names(clinical)),])
dim(TCGA.counts)
CN.chr17p["MYOCD",]>2
cluster=factor(cutree(clust$tree_col, k = 2))
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
levels(cluster) <- c("clusterA","clusterB")
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
all.equal(colnames(CN.chr17),row.names(clinical))
pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location","CN.clust")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
clinical$CN.clust[as.vector(CN.chr17p["MYOCD",match(row.names(clinical),colnames(CN.chr17))]>2)] <- "ClusterA"
match(row.names(clinical),colnames(CN.chr17)
)
cluster=factor(cutree(clust$tree_col, k = 2))
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
levels(cluster) <- c("clusterA","clusterB")
clinical$CN.clust[as.vector(CN.chr17p["MYOCD",match(row.names(clinical),colnames(CN.chr17))]>2)] <- "clusterA"
head(clinical)
cluster=factor(cutree(clust$tree_col, k = 2))
levels(cluster) <- c("clusterA","clusterB")
clinical$CN.clust <- cluster[match(row.names(clinical),names(cluster))]
clinical$CN.clust[as.vector(CN.chr17p["MYOCD",match(row.names(clinical),colnames(CN.chr17))]>2)] <- "clusterA"
pheatmap(CN.chr17p,
annotation_col=clinical[,c("Differentiation","Sex","Location","CN.clust")],
cluster_rows=F,
annotation_row = annoRow,
show_rownames = F,show_colnames = F,
clustering_method="ward",
color=colorRampPalette(c(colours()[131],colours()[121],"white","red",colours()[35]))(100))
save(clinical,file="data/clinical_CN.RData")
fisher.test(x=clinical$Differentiation,y=clinical$CN.clust)
fisher.test(x=clinical$Location,y=clinical$CN.clust)
fisher.test(x=clinical$Sex,y=clinical$CN.clust)
coxph(survie.OS ~ CN.clust,data=clinical)
coxph(survie.MFS ~ CN.clust,data=clinical)
plot(coxph.survie.OS)
class(coxph.survie.OS)
coxph.survie.OS <- coxph(survie.OS ~ CN.clust,data=clinical)
coxph.survie.MFS <- coxph(survie.MFS ~ CN.clust,data=clinical)
class(coxph.survie.OS)
plot(coxph.survie.OS)
plot.coxph(coxph.survie.OS)
plot(coxph.survie.OS)
print(coxph.survie.OS)
plot(coxph.survie.OS)
plot(surfit(coxph.survie.OS))
plot(survfit(coxph.survie.OS))
coxph.survie.OS
plot(survfit(coxph.survie.OS))
library(survminer)
print(ggsurvplot(coxph.survie.OS, data = clinical,  size = 1,  pval = TRUE,palette=c(colours()[613],colours()[132]),risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
print(ggsurvplot(coxph.survie.OS, data = clinical,  size = 1,  pval = TRUE,palette=c(colours()[613],colours()[132]),risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
fit <- survfit(Surv(Time_OS,OS) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = TRUE,palette=c(colours()[613],colours()[132]),risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
fit <- survfit(Surv(Time_MFS,Meta) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = TRUE,palette=c(colours()[613],colours()[132]),risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
fit <- survfit(Surv(Time_OS,OS) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = TRUE,palette=c(colours()[613],colours()[132]),risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
fit <- survfit(Surv(Time_OS,OS) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = TRUE,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
fit <- survfit(Surv(Time_MFS,Meta) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = TRUE,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.25))
?ggsurvplot
coxph.survie.OS
coxph.survie.MFS
fit <- survfit(Surv(Time_OS,OS) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = T,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.3),xlab="Overall Survival",break.time.by=2)
fit <- survfit(Surv(Time_OS,OS) ~ CN.clust,data=clinical)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = T,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.3),xlab="Overall Survival",break.time.by=4)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = T,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.3),xlab="Overall Survival",break.time.by=10)
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = T,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.3,xlab="Overall Survival",break.time.by=10))
print(ggsurvplot(fit, data = clinical,  size = 1,  pval = T,risk.table = TRUE,  risk.table.col = "strata", risk.table.height = 0.3,xlab="Overall Survival",break.time.by=2))
clinical <- clinical[na.omit(m),]
dim(clinical)
m <- match(colnames(TCGA.counts),row.names(clinical))
clinical <- clinical[na.omit(m),]
dim(clinical)
all.equal(colnames(TCGA.counts),row.names(clinical))
library(edgeR)
group <- factor(clinical$CN.clust)
edger.list <- DGEList(counts=TCGA.counts, group=group)
edger.norm <- calcNormFactors(edger.list)
design <- model.matrix(~group)
edger.norm <- estimateDisp(edger.norm,design)
edger.2vs1 <- exactTest(edger.norm)
edger.2vs1 <- as.data.frame(topTags(edger.2vs1,n = Inf))
head(edger.2vs1)
head(edger.2vs1)
?exactTest
edger.BvsA <- exactTest(edger.norm)
# Récupérer le résultat avec tous les gènes et le transformer en data.frame
edger.BvsA <- as.data.frame(topTags(edger.BvsA,n = Inf))
head(edger.BvsA)
results <- data.frame(gene=row.names(edger.BvsA), logFC=edger.BvsA$logFC)
head(results)
is.sig <- edger.BvsA$FDR < 0.01
is.up <- edger.BvsA$logFC > 2
up.genes <- row.names(edger.BvsA)[is.sig & is.up]
# écrire le résultat dans un fichier
writeLines(up.genes,
"results/up_genes.txt")
# Gènes sous-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.down <- edger.BvsA$logFC > 2
down.genes <- row.names(edger.BvsA)[is.sig & is.down]
# écrire le résultat dans un fichier
writeLines(down.genes,
"results/down_genes.txt")
write.table(results, # objet à écrire
# chemin et nom du fichier à écrire
file="differentially_expressed_genes.tab",
sep="\t", # type de séparateur, ici tabulation
# ne pas écrire le nom de colonnes, des lignes et ne
# pas mettre de guillemets si il s'agit de caractères
row.names=F, col.names=F, quote=F
)
# Gènes sur-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.up <- edger.BvsA$logFC > 2
up.genes <- row.names(edger.BvsA)[is.sig & is.up]
# écrire le résultat dans un fichier
writeLines(up.genes,
"up_genes.txt")
# Gènes sous-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.down <- edger.BvsA$logFC > 2
down.genes <- row.names(edger.BvsA)[is.sig & is.down]
# écrire le résultat dans un fichier
writeLines(down.genes,
"down_genes.txt")
# Gènes sur-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.up <- edger.BvsA$logFC > 3
up.genes <- row.names(edger.BvsA)[is.sig & is.up]
# écrire le résultat dans un fichier
writeLines(up.genes,
"up_genes.txt")
# Gènes sous-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.down <- edger.BvsA$logFC > 3
down.genes <- row.names(edger.BvsA)[is.sig & is.down]
# écrire le résultat dans un fichier
writeLines(down.genes,
"down_genes.txt")
is.sig <- edger.BvsA$FDR < 0.01
is.up <- edger.BvsA$logFC > 3
up.genes <- row.names(edger.BvsA)[is.sig & is.up]
# écrire le résultat dans un fichier
writeLines(up.genes,
"up_genes.txt")
# Gènes sous-exprimés
is.sig <- edger.BvsA$FDR < 0.01
is.down <- edger.BvsA$logFC < -3
down.genes <- row.names(edger.BvsA)[is.sig & is.down]
# écrire le résultat dans un fichier
writeLines(down.genes,
"down_genes.txt")
edger.BvsA["MYOCD",]
